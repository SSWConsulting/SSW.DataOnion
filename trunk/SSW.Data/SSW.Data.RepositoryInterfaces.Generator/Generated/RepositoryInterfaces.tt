<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="Configurations\RepositoryInterfacesConfigurations.ttinclude" #>

using <#=Configurations.DomainModelProjectNamespace#>;

using SSW.Data.Interfaces;

namespace <#=Configurations.RepositoryInterfacesProjectNamespace#>
{
<#
	var entityTypes = AssemblyHelper.GetDomainTypes(Host.ResolvePath(@"..\bin\Debug"));

	foreach (var entityType in entityTypes)	        
	{
#>
	public partial interface I<#=entityType.Name#>Repository : IRepository<<#=entityType.Name#>>
	{
	}
<#
	}
#>
}

<#+
public class ProxyDomain : MarshalByRefObject
{
    public Assembly GetAssembly(string assemblyPath)
    {
        try
        {
            return Assembly.LoadFrom(assemblyPath);
        }
        catch (Exception ex)
        {
			throw new InvalidOperationException(ex.Message);
        }
    }
}

public static partial class AssemblyHelper 
{
	public static Type[] GetDomainTypes(string binFolderPath)
	{
		Type[] entityTypes;
	
		try 
		{
			var proxyDomain = new ProxyDomain();
			var assembly = proxyDomain.GetAssembly(Path.Combine(binFolderPath, Configurations.DomainModelProjectDll));

			if (!string.IsNullOrEmpty(Configurations.BaseEntityClass))
			{
				var func = Configurations.DomainTypeFilter;
				var baseEntityAssembly = proxyDomain.GetAssembly(Path.Combine(binFolderPath, Configurations.BaseEntityClassDll));
				Type baseType = baseEntityAssembly.GetTypes().First(t => t.Name == Configurations.BaseEntityClass);
				entityTypes = assembly.GetTypes()
								.Where(t => baseType == null || (baseType.IsAssignableFrom(t) && t != baseType))
								.Where(t => func(t))
								.ToArray();
			} 
			else 
			{
				entityTypes = assembly.GetTypes().Where(t => !t.IsAbstract).ToArray();
			}
        }
		catch
		{
			throw;
        }

		return entityTypes;
    }
}
#>

