<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="Configurations\RepositoriesConfigurations.ttinclude" #>

using <#=Configurations.DomainModelProjectNamespace#>;
using <#=Configurations.RepositoryInterfacesProjectNamespace#>;

using SSW.Data.EF;

namespace <#=Configurations.RepositoriesProjectNamespace#>
{
<#
	Type[] entityTypes;
	
	var proxyDomain = new ProxyDomain();
	var assembly = proxyDomain.GetAssembly(Path.Combine(Host.ResolvePath(@"..\bin\Debug"), Configurations.DomainModelProjectDll));

	if (!string.IsNullOrEmpty(Configurations.BaseEntityClass))
	{
		var baseEntityAssembly = proxyDomain.GetAssembly(Path.Combine(Host.ResolvePath(@"..\bin\Debug"), Configurations.BaseEntityClassDll));
		Type baseType = baseEntityAssembly.GetTypes().First(t => t.Name == Configurations.BaseEntityClass);
		entityTypes = assembly.GetTypes()
                        .Where(t => baseType.IsAssignableFrom(t) && t != baseType && !t.IsAbstract)
                        .ToArray();
	} 
	else 
	{
		entityTypes = assembly.GetTypes().Where(t => !t.IsAbstract).ToArray();
    }

	foreach (var entityType in entityTypes)	        
	{
#>
	public partial class <#=entityType.Name#>Repository : BaseRepository<<#=entityType.Name#>>, I<#=entityType.Name#>Repository
	{
		public <#=entityType.Name#>Repository(IDbContextManager contextmanager)
			: base(contextmanager)
		{
		}
	}
<#
	}
#>
}

<#+
public class ProxyDomain : MarshalByRefObject
{
    public Assembly GetAssembly(string assemblyPath)
    {
        try
        {
            return Assembly.LoadFrom(assemblyPath);
        }
        catch (Exception ex)
        {
			throw new InvalidOperationException(ex.Message);
        }
    }
}
#>

