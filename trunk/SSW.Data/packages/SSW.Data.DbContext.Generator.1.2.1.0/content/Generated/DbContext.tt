<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="Configurations\DbContextConfigurations.ttinclude" #>

namespace <#=Configurations.DataProjectNamespace#>
{
	using System.Data.Entity;
	using <#=Configurations.DomainModelProjectNamespace#>;

	using SSW.Data.Entities;

	public partial class <#=Configurations.DbContextName#>
	{
<#
	var entityTypes = AssemblyHelper.GetDomainTypes(Host.ResolvePath(@"..\bin\Debug"));

	foreach (var entityType in entityTypes)	        
	{
#>
		public IDbSet<<#=entityType.Name#>> <#=entityType.Name#>s { get; set; }

<#
	}
#>
	}
}

<#+
public class ProxyDomain : MarshalByRefObject
{
    public Assembly GetAssembly(string assemblyPath)
    {
        try
        {
            return Assembly.LoadFrom(assemblyPath);
        }
        catch (Exception ex)
        {
			throw new InvalidOperationException(ex.Message);
        }
    }
}

public static partial class AssemblyHelper 
{
	public static Type[] GetDomainTypes(string binFolderPath)
	{
		Type[] entityTypes;
	
		var proxyDomain = new ProxyDomain();
		var assembly = proxyDomain.GetAssembly(Path.Combine(binFolderPath, Configurations.DomainModelProjectDll));

		if (!string.IsNullOrEmpty(Configurations.BaseEntityClass))
		{
			var func = Configurations.DomainTypeFilter;
			var baseEntityAssembly = proxyDomain.GetAssembly(Path.Combine(binFolderPath, Configurations.BaseEntityClassDll));
			Type baseType = baseEntityAssembly.GetTypes().First(t => t.Name == Configurations.BaseEntityClass);
			entityTypes = assembly.GetTypes()
							.Where(t => baseType == null || (baseType.IsAssignableFrom(t) && t != baseType))
							.Where(t => func(t))
							.ToArray();
		} 
		else 
		{
			entityTypes = assembly.GetTypes().Where(t => !t.IsAbstract).ToArray();
        }

		return entityTypes;
    }
}
#>

